import pygame


class Bullet(pygame.sprite.Sprite):
    """A projectile launched by the player"""

    def __init__(self, x, y, bullet_group, player):
        """Initialize the bullet"""
        super().__init__()

        # Set constant variables
        self.VELOCITY = 20
        self.RANGE = 500

        # Load image and get rect
        if player.velocity.x > 0:
            self.image = pygame.transform.scale(pygame.image.load("./assets/images/player/slash.png"), (32, 32))
        else:
            self.image = pygame.transform.scale(pygame.transform.flip(pygame.image.load("./assets/images/player/slash.png"), True, False), (32, 32))

        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.starting_x = x

        bullet_group.add(self)

    def update(self):
        """Update the bullet"""
        # NOTE NOTE NOTE THIS: When I say add to y the value of x this means y += x or y = y + x
        self.rect.x += self.VELOCITY

        #If the bullet has passed the range, kill it
        if abs(self.rect.x - self.starting_x) > self.RANGE:
            self.kill()





from typing import cast

import pygame

from Player import Player
from Portal import Portal
from Ruby import Ruby
from RubyMaker import RubyMaker
from Tile import Tile
from Zombie import Zombie


class Game:
    """A class to help manage gameplay"""

    # Set display surface (tile size is 32x32 so 1280/32 = 40 tiles wide, 736/32 = 23 tiles high)
    WINDOW_WIDTH = 1280
    WINDOW_HEIGHT = 736
    display_surface = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
    pygame.display.set_caption("Zombie Knight")

    # Set FPS and clock
    FPS = 60
    clock = pygame.time.Clock()

    # Set colors
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)
    GREEN = (25, 200, 25)

    def __init__(self):
        """Initialize the game"""
        # Set constant variables
        self.running = True
        self.STARTING_ROUND_TIME = 30
        self.STARTING_ZOMBIE_CREATION_TIME = 5

        # Set game values
        self.score = 0
        self.round_number = 1
        self.frame_count = 0
        self.round_time = self.STARTING_ROUND_TIME
        self.zombie_creation_time = self.STARTING_ZOMBIE_CREATION_TIME

        # Fonts
        self.title_font = pygame.font.Font("./assets/fonts/Poultrygeist.ttf", 48)
        self.HUD_font = pygame.font.Font("./assets/fonts/Pixel.ttf", 24)

        # Sounds
        self.lost_ruby_sound = pygame.mixer.Sound("assets/sounds/lost_ruby.wav")
        self.ruby_pickup_sound = pygame.mixer.Sound("assets/sounds/ruby_pickup.wav")
        pygame.mixer.music.load("assets/sounds/level_music.wav")

        # Tile map
        self.tile_map = [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 8, 0],
            [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
             4, 4, 4, 4],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [4, 4, 4, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4,
             4, 4, 4, 4],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
             4, 4, 4, 4],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0],
            [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 7, 0],
            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
             2, 2, 2, 2],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
             1, 1, 1, 1]
        ]

        # Create sprite groups
        self.main_tile_group = pygame.sprite.Group()
        self.platform_group = pygame.sprite.Group()
        self.player_group = pygame.sprite.Group()
        self.bullet_group = pygame.sprite.Group()
        self.zombie_group = pygame.sprite.Group()
        self.portal_group = pygame.sprite.Group()
        self.ruby_group = pygame.sprite.Group()

        # Generate Tile objects from the tile map
        for row in range(len(self.tile_map)):
            for col in range(len(self.tile_map[row])):
                x = col * 32
                y = row * 32
                tile = self.tile_map[row][col]
                if tile == 1:
                    Tile(x, y, 1, self.main_tile_group)
                elif tile == 2:
                    Tile(x, y, 2, self.main_tile_group, self.platform_group)
                elif tile == 3:
                    Tile(x, y, 3, self.main_tile_group, self.platform_group)
                elif tile == 4:
                    Tile(x, y, 4, self.main_tile_group, self.platform_group)
                elif tile == 5:
                    Tile(x, y, 5, self.main_tile_group, self.platform_group)
                elif tile == 6:
                    RubyMaker(x, y, self.main_tile_group)
                elif tile == 7:
                    Portal(x, y, "green", self.portal_group)
                elif tile == 8:
                    Portal(x, y, "purple", self.portal_group)
                elif tile == 9:
                    self.my_player = Player(
                        x - 32, y + 32,
                        self.platform_group, self.portal_group, self.bullet_group,
                        self.WINDOW_WIDTH, self.WINDOW_HEIGHT
                    )
                    self.player_group.add(self.my_player)

        # Load in a background image (we must resize)
        self.background_image = pygame.transform.scale(
            pygame.image.load("./assets/images/background.png"), (1280, 736)
        )
        self.background_rect = self.background_image.get_rect()
        self.background_rect.topleft = (0, 0)

        self.pause_game("Zombie Knight", "Press 'Enter' to Begin")
        pygame.mixer.music.play(-1, 0.0)
        self.game_loop()

    def game_loop(self):
        # The main game loop
        running = True
        while running:
            # Check to see if the user wants to quit
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                if event.type == pygame.KEYDOWN:
                    # Player wants to jump
                    if event.key == pygame.K_SPACE:
                        self.my_player.jump()
                    # Player wants to fire
                    if event.key == pygame.K_UP:
                        self.my_player.fire()

            # Blit the background
            Game.display_surface.blit(self.background_image, self.background_rect)

            # Draw tiles and update ruby maker



import pygame

from Game import Game

#Initiailize pygame
pygame.init()

# Create a game
Game()

#End the game
pygame.quit()




import pygame
from Bullet import Bullet

class Player(pygame.sprite.Sprite):
    """A class the user can control"""

    def __init__(self, x, y, platform_group, portal_group, bullet_group, window_width, window_height):
        """Initialize the player"""
        super().__init__()  # Call super init

        # Set constant variables
        self.HORIZONTAL_ACCELERATION = 2
        self.HORIZONTAL_FRICTION = 0.15
        self.VERTICAL_ACCELERATION = 0.8
        self.VERTICAL_JUMP_SPEED = 18
        self.STARTING_HEALTH = 100
        self.WINDOW_WIDTH = window_width
        self.WINDOW_HEIGHT = window_height

        # Animation frames
        self.move_right_sprites = []
        self.move_left_sprites = []
        self.idle_right_sprites = []
        self.idle_left_sprites = []
        self.jump_right_sprites = []
        self.jump_left_sprites = []
        self.attack_right_sprites = []
        self.attack_left_sprites = []

        # Moving
        for i in range(1, 11):
            img = pygame.transform.scale(
                pygame.image.load(f"./assets/images/player/run/Run ({i}).png"), (64, 64)
            )
            self.move_right_sprites.append(img)
        for sprite in self.move_right_sprites:
            self.move_left_sprites.append(pygame.transform.flip(sprite, True, False))

        # Idling
        for i in range(1, 11):
            img = pygame.transform.scale(
                pygame.image.load(f"./assets/images/player/idle/Idle ({i}).png"), (64, 64)
            )
            self.idle_right_sprites.append(img)
        for sprite in self.idle_right_sprites:
            self.idle_left_sprites.append(pygame.transform.flip(sprite, True, False))

        # Jumping
        for i in range(1, 11):
            img = pygame.transform.scale(
                pygame.image.load(f"./assets/images/player/jump/Jump ({i}).png"), (64, 64)
            )
            self.jump_right_sprites.append(img)
        for sprite in self.jump_right_sprites:
            self.jump_left_sprites.append(pygame.transform.flip(sprite, True, False))

        # Attacking
        for i in range(1, 11):
            img = pygame.transform.scale(
                pygame.image.load(f"./assets/images/player/attack/Attack ({i}).png"), (64, 64)
            )
            self.attack_right_sprites.append(img)
        for sprite in self.attack_right_sprites:
            self.attack_left_sprites.append(pygame.transform.flip(sprite, True, False))

        # Load image and get rect
        self.current_sprite = 0
        self.image = self.idle_right_sprites[self.current_sprite]
        self.rect = self.image.get_rect()
        self.rect.bottomleft = (x, y)

        self.mask = pygame.mask.from_surface(self.image)

        # Attach sprite groups
        self.platform_group = platform_group
        self.portal_group = portal_group
        self.bullet_group = bullet_group

        # Animation booleans
        self.animate_jump = False
        self.animate_fire = False

        # Load sounds
        self.jump_sound = pygame.mixer.Sound("assets/sounds/jump_sound.wav")
        self.slash_sound = pygame.mixer.Sound("assets/sounds/slash_sound.wav")
        self.portal_sound = pygame.mixer.Sound("assets/sounds/portal_sound.wav")
        self.hit_sound = pygame.mixer.Sound("assets/sounds/player_hit.wav")

        # Kinematics vectors
        self.position = pygame.math.Vector2(x, y)
        self.velocity = pygame.math.Vector2(0, 0)
        self.acceleration = pygame.math.Vector2(0, self.VERTICAL_ACCELERATION)

        # Set initial player values
        self.health = self.STARTING_HEALTH
        self.starting_x = x
        self.starting_y = y

    def update(self):
        """Update the player"""
        self.move()
        self.check_collisions()
        self.check_animations()
        self.mask = pygame.mask.from_surface(self.image)

    def move(self):
        """Move the player"""
        self.acceleration = pygame.math.Vector2(0, self.VERTICAL_ACCELERATION)
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.acceleration.x = -1 * self.HORIZONTAL_ACCELERATION
            self.animate(self.move_left_sprites, .5)
        elif keys[pygame.K_RIGHT]:
            self.acceleration.x = self.HORIZONTAL_ACCELERATION
            self.animate(self.move_right_sprites, .5)
        else:
            if self.velocity.x > 0:
                self.animate(self.idle_right_sprites, .5)
            else:
                self.animate(self.idle_left_sprites, .5)

        self.acceleration.x -= self.velocity.x * self.HORIZONTAL_FRICTION
        self.velocity += self.acceleration
        self.position += self.velocity + 0.5 * self.acceleration

        if self.position.x < 0:
            self.position.x = self.WINDOW_WIDTH
        elif self.position.x > self.WINDOW_WIDTH:
            self.position.x = 0

        self.rect.bottomleft = self.position

    def check_collisions(self):
        """Check for collisions with platforms and portals"""
        if self.velocity.y > 0:
            collided_platforms = pygame.sprite.spritecollide(
                self, self.platform_group, False, pygame.sprite.collide_mask
            )
            if collided_platforms:
                self.position.y = collided_platforms[0].rect.top + 5
                self.velocity.y = 0

        if self.velocity.y < 0:
            collided_platforms = pygame.sprite.spritecollide(
                self, self.platform_group, False, pygame.sprite.collide_mask
            )
            if collided_platforms:
                self.velocity.y = 0
                while pygame.sprite.spritecollide(self, self.platform_group, False):
                    self.position.y += 1
                    self.rect.bottomleft = self.position

        if pygame.sprite.spritecollide(self, self.portal_group, False):
            self.portal_sound.play()
            if self.position.x > self.WINDOW_WIDTH // 2:
                self.position.x = 86
            else:
                self.position.x = self.WINDOW_WIDTH - 150
            if self.position.y > self.WINDOW_HEIGHT // 2:
                self.position.y = 64
            else:
                self.position.y = self.WINDOW_HEIGHT - 132

            self.rect.bottomleft = self.position

    def check_animations(self):
        """Check to see if jump/fire animations should run"""
        if self.animate_jump:
            if self.velocity.x > 0:
                self.animate(self.jump_right_sprites, .1)
            else:
                self.animate(self.jump_left_sprites, .1)

        if self.animate_fire:
            if self.velocity.x > 0:
                self.animate(self.attack_right_sprites, .25)
            else:
                self.animate(self.attack_left_sprites, .25)

    def jump(self):
        """Jump upwards if on a platform"""
        if pygame.sprite.spritecollide(self, self.platform_group, False):
            self.jump_sound.play()
            self.velocity.y = -1 * self.VERTICAL_JUMP_SPEED
            self.animate_jump = True

    def fire(self):
        """Fire a 'bullet' from a sword"""
        self.slash_sound.play()
        Bullet(self.rect.centerx, self.rect.centery, self.bullet_group, self)
        self.animate_fire = True

    def reset(self):
        """Reset the player's position"""
        self.velocity = pygame.math.Vector2(0, 0)
        self.position = pygame.math.Vector2(self.starting_x, self.starting_y)
        self.rect.bottomleft = self.position

    def animate(self, sprite_list, speed):
        """Animate the player's actions"""
        if self.current_sprite < len(sprite_list) - 1:
            self.current_sprite += speed
        else:
            self.current_sprite = 0
            if self.animate_jump:
                self.animate_jump = False
            if self.animate_fire:
                self.animate_fire = False
        self.image = sprite_list[int(self.current_sprite)]




import random

import pygame

class Portal(pygame.sprite.Sprite):
    """A class that if collided with will transport you"""

    def __init__(self, x, y, color, portal_group):
        """Initialize the portal"""
        super().__init__()

        #Animation frames
        self.portal_sprites = []

        #Portal animation
        if color == "green":
            #Green portal
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile000.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile001.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile002.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile003.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile004.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile005.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile006.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile007.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile008.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile009.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile010.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile011.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile012.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile013.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile014.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile015.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile016.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile017.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile018.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile019.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile020.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/green/tile021.png"), (72, 72)))
        else:
            #Purple portal
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile000.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile001.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile002.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile003.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile004.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile005.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile006.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile007.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile008.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile009.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile010.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile011.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile012.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile013.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile014.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile015.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile016.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile017.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile018.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile019.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile020.png"), (72, 72)))
            self.portal_sprites.append(pygame.transform.scale(pygame.image.load(
                "assets/images/portals/purple/tile021.png"), (72, 72)))

        #Load an image and get a rect
        self.current_sprite = random.randint(0, len(self.portal_sprites) - 1)
        self.image = self.portal_sprites[self.current_sprite]
        self.rect = self.image.get_rect()
        self.rect.bottomleft = (x, y)

        #Add to the portal group
        portal_group.add(self)
    def update(self):
        """Update the portal"""
        self.animate(self.portal_sprites, 0.2)

    def animate(self, sprite_list, speed):
        """Animate the portal"""
        if self.current_sprite < len(sprite_list) - 1:
            self.current_sprite += speed
        else:
            self.current_sprite = 0

        self.image = sprite_list[int(self.current_sprite)]





import pygame
from Bullet import Bullet

class Player(pygame.sprite.Sprite):
    """A class the user can control"""

    def __init__(self, x, y, platform_group, portal_group, bullet_group, window_width, window_height):
        """Initialize the player"""
        super().__init__()  # Call super init

        # Set constant variables
        self.HORIZONTAL_ACCELERATION = 2
        self.HORIZONTAL_FRICTION = 0.15
        self.VERTICAL_ACCELERATION = 0.8
        self.VERTICAL_JUMP_SPEED = 18
        self.STARTING_HEALTH = 100
        self.WINDOW_WIDTH = window_width
        self.WINDOW_HEIGHT = window_height

        # Animation frames
        self.move_right_sprites = []
        self.move_left_sprites = []
        self.idle_right_sprites = []
        self.idle_left_sprites = []
        self.jump_right_sprites = []
        self.jump_left_sprites = []
        self.attack_right_sprites = []
        self.attack_left_sprites = []

        # Moving
        for i in range(1, 11):
            img = pygame.transform.scale(
                pygame.image.load(f"./assets/images/player/run/Run ({i}).png"), (64, 64)
            )
            self.move_right_sprites.append(img)
        for sprite in self.move_right_sprites:
            self.move_left_sprites.append(pygame.transform.flip(sprite, True, False))

        # Idling
        for i in range(1, 11):
            img = pygame.transform.scale(
                pygame.image.load(f"./assets/images/player/idle/Idle ({i}).png"), (64, 64)
            )
            self.idle_right_sprites.append(img)
        for sprite in self.idle_right_sprites:
            self.idle_left_sprites.append(pygame.transform.flip(sprite, True, False))

        # Jumping
        for i in range(1, 11):
            img = pygame.transform.scale(
                pygame.image.load(f"./assets/images/player/jump/Jump ({i}).png"), (64, 64)
            )
            self.jump_right_sprites.append(img)
        for sprite in self.jump_right_sprites:
            self.jump_left_sprites.append(pygame.transform.flip(sprite, True, False))

        # Attacking
        for i in range(1, 11):
            img = pygame.transform.scale(
                pygame.image.load(f"./assets/images/player/attack/Attack ({i}).png"), (64, 64)
            )
            self.attack_right_sprites.append(img)
        for sprite in self.attack_right_sprites:
            self.attack_left_sprites.append(pygame.transform.flip(sprite, True, False))

        # Load image and get rect
        self.current_sprite = 0
        self.image = self.idle_right_sprites[self.current_sprite]
        self.rect = self.image.get_rect()
        self.rect.bottomleft = (x, y)

        self.mask = pygame.mask.from_surface(self.image)

        # Attach sprite groups
        self.platform_group = platform_group
        self.portal_group = portal_group
        self.bullet_group = bullet_group

        # Animation booleans
        self.animate_jump = False
        self.animate_fire = False

        # Load sounds
        self.jump_sound = pygame.mixer.Sound("assets/sounds/jump_sound.wav")
        self.slash_sound = pygame.mixer.Sound("assets/sounds/slash_sound.wav")
        self.portal_sound = pygame.mixer.Sound("assets/sounds/portal_sound.wav")
        self.hit_sound = pygame.mixer.Sound("assets/sounds/player_hit.wav")

        # Kinematics vectors
        self.position = pygame.math.Vector2(x, y)
        self.velocity = pygame.math.Vector2(0, 0)
        self.acceleration = pygame.math.Vector2(0, self.VERTICAL_ACCELERATION)

        # Set initial player values
        self.health = self.STARTING_HEALTH
        self.starting_x = x
        self.starting_y = y

    def update(self):
        """Update the player"""
        self.move()
        self.check_collisions()
        self.check_animations()
        self.mask = pygame.mask.from_surface(self.image)

    def move(self):
        """Move the player"""
        self.acceleration = pygame.math.Vector2(0, self.VERTICAL_ACCELERATION)
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.acceleration.x = -1 * self.HORIZONTAL_ACCELERATION
            self.animate(self.move_left_sprites, .5)
        elif keys[pygame.K_RIGHT]:
            self.acceleration.x = self.HORIZONTAL_ACCELERATION
            self.animate(self.move_right_sprites, .5)
        else:
            if self.velocity.x > 0:
                self.animate(self.idle_right_sprites, .5)
            else:
                self.animate(self.idle_left_sprites, .5)

        self.acceleration.x -= self.velocity.x * self.HORIZONTAL_FRICTION
        self.velocity += self.acceleration
        self.position += self.velocity + 0.5 * self.acceleration

        if self.position.x < 0:
            self.position.x = self.WINDOW_WIDTH
        elif self.position.x > self.WINDOW_WIDTH:
            self.position.x = 0

        self.rect.bottomleft = self.position

    def check_collisions(self):
        """Check for collisions with platforms and portals"""
        if self.velocity.y > 0:
            collided_platforms = pygame.sprite.spritecollide(
                self, self.platform_group, False, pygame.sprite.collide_mask
            )
            if collided_platforms:
                self.position.y = collided_platforms[0].rect.top + 5
                self.velocity.y = 0

        if self.velocity.y < 0:
            collided_platforms = pygame.sprite.spritecollide(
                self, self.platform_group, False, pygame.sprite.collide_mask
            )
            if collided_platforms:
                self.velocity.y = 0
                while pygame.sprite.spritecollide(self, self.platform_group, False):
                    self.position.y += 1
                    self.rect.bottomleft = self.position

        if pygame.sprite.spritecollide(self, self.portal_group, False):
            self.portal_sound.play()
            if self.position.x > self.WINDOW_WIDTH // 2:
                self.position.x = 86
            else:
                self.position.x = self.WINDOW_WIDTH - 150
            if self.position.y > self.WINDOW_HEIGHT // 2:
                self.position.y = 64
            else:
                self.position.y = self.WINDOW_HEIGHT - 132

            self.rect.bottomleft = self.position

    def check_animations(self):
        """Check to see if jump/fire animations should run"""
        if self.animate_jump:
            if self.velocity.x > 0:
                self.animate(self.jump_right_sprites, .1)
            else:
                self.animate(self.jump_left_sprites, .1)

        if self.animate_fire:
            if self.velocity.x > 0:
                self.animate(self.attack_right_sprites, .25)
            else:
                self.animate(self.attack_left_sprites, .25)

    def jump(self):
        """Jump upwards if on a platform"""
        if pygame.sprite.spritecollide(self, self.platform_group, False):
            self.jump_sound.play()
            self.velocity.y = -1 * self.VERTICAL_JUMP_SPEED
            self.animate_jump = True

    def fire(self):
        """Fire a 'bullet' from a sword"""
        self.slash_sound.play()
        Bullet(self.rect.centerx, self.rect.centery, self.bullet_group, self)
        self.animate_fire = True

    def reset(self):
        """Reset the player's position"""
        self.velocity = pygame.math.Vector2(0, 0)
        self.position = pygame.math.Vector2(self.starting_x, self.starting_y)
        self.rect.bottomleft = self.position

    def animate(self, sprite_list, speed):
        """Animate the player's actions"""
        if self.current_sprite < len(sprite_list) - 1:
            self.current_sprite += speed
        else:
            self.current_sprite = 0
            if self.animate_jump:
                self.animate_jump = False
            if self.animate_fire:
                self.animate_fire = False
        self.image = sprite_list[int(self.current_sprite)]




import pygame
import random


class Ruby(pygame.sprite.Sprite):
    """A class the player must collect to earn points and health"""

    def __init__(self, platform_group, portal_group, window_width, window_height):
        """Initialize the ruby"""
        super().__init__()

        # Set constant variables
        self.VERTICAL_ACCELERATION = 3
        self.HORIZONTAL_VELOCITY = 5
        self.WINDOW_WIDTH = window_width
        self.WINDOW_HEIGHT = window_height

        # Animation frames
        self.ruby_sprites = []

        # Load all rotation sprites
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile000.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile001.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile002.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile003.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile004.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile005.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile006.png"), (64, 64)))

        # Load image and get rect
        self.current_sprite = 0
        self.image = self.ruby_sprites[self.current_sprite]
        self.rect = self.image.get_rect()
        self.rect.bottomleft = (window_width // 2, 100)

        # Attach sprite groups
        self.platform_group = platform_group
        self.portal_group = portal_group


        self.portal_sound = pygame.mixer.Sound("assets/sounds/portal_sound.wav")

        # Kinematic vectors
        self.position = pygame.math.Vector2(self.rect.x, self.rect.y)
        self.velocity = pygame.math.Vector2(
            random.choice([-1 * self.HORIZONTAL_VELOCITY, self.HORIZONTAL_VELOCITY]),
            0
        )
        self.acceleration = pygame.math.Vector2(0, self.VERTICAL_ACCELERATION)

    def update(self):
        """Update the ruby"""
        self.animate(self.ruby_sprites, 0.25)
        self.move()
        self.check_collisions()

    def move(self):
        """Move the ruby"""

        self.velocity += self.acceleration
        self.position += self.velocity + 0.5 * self.acceleration

        # Window wrapping
        if self.position.x < 0:
            self.position.x = self.WINDOW_WIDTH
        elif self.position.x > self.WINDOW_WIDTH:
            self.position.x = 0


        self.rect.bottomleft = self.position

    def check_collisions(self):
        """Check for collisions with platforms and portals"""

        collided_platforms = pygame.sprite.spritecollide(self, self.platform_group, False)
        if collided_platforms:
            self.position.y = collided_platforms[0].rect.top + 1
            self.velocity.y = 0


        if pygame.sprite.spritecollide(self, self.portal_group, False):
            self.portal_sound.play()

            if self.position.x > self.WINDOW_WIDTH // 2:
                self.position.x = 86
            else:
                self.position.x = self.WINDOW_WIDTH - 150

            if self.position.y > self.WINDOW_HEIGHT // 2:
                self.position.y = 64
            else:
                self.position.y = self.WINDOW_HEIGHT - 132

            self.rect.bottomleft = self.position

    def animate(self, sprite_list, speed):
        """Animate the ruby"""
        if self.current_sprite < len(sprite_list) - 1:
            self.current_sprite += speed
        else:
            self.current_sprite = 0

        self.image = sprite_list[int(self.current_sprite)]





import pygame

class RubyMaker(pygame.sprite.Sprite):
    """A tile that is animated. A ruby will be generated here."""

    def __init__(self, x, y, main_group):
        """Initialize the ruby maker"""
        super().__init__()

        # Animation frames
        self.ruby_sprites = []

        # Rotating
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile000.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile001.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile002.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile003.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile004.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile005.png"), (64, 64)))
        self.ruby_sprites.append(
            pygame.transform.scale(pygame.image.load("./assets/images/ruby/tile006.png"), (64, 64)))

        # Load image and get rect
        self.current_sprite = 0
        self.image = self.ruby_sprites[self.current_sprite]
        self.rect = self.image.get_rect()
        self.rect.bottomleft = (x, y)

        # Add to the main group for drawing purposes
        main_group.add(self)

    def update(self):
        """Update the ruby maker"""
        self.animate(self.ruby_sprites, 0.25)

    def animate(self, sprite_list, speed):
        """Animate the ruby maker"""
        if self.current_sprite < len(sprite_list) - 1:
            self.current_sprite += speed
        else:
            self.current_sprite = 0

        self.image = sprite_list[int(self.current_sprite)]



import pygame

class Tile(pygame.sprite.Sprite):
    """A class to represent a 32x32 pixel area in our display"""

    def __init__(self, x, y, image_int, main_group, sub_group=None):
        super().__init__()

        if image_int == 1:
            self.image = pygame.transform.scale(
                pygame.image.load("./assets/images/tiles/Tile (1).png"), (32, 32)
            )
        elif image_int == 2:
            self.image = pygame.transform.scale(
                pygame.image.load("./assets/images/tiles/Tile (2).png"), (32, 32)
            )
            if sub_group:
                sub_group.add(self)
        elif image_int == 3:
            self.image = pygame.transform.scale(
                pygame.image.load("./assets/images/tiles/Tile (3).png"), (32, 32)
            )
            if sub_group:
                sub_group.add(self)
        elif image_int == 4:
            self.image = pygame.transform.scale(
                pygame.image.load("./assets/images/tiles/Tile (4).png"), (32, 32)
            )
            if sub_group:
                sub_group.add(self)
        elif image_int == 5:
            self.image = pygame.transform.scale(
                pygame.image.load("./assets/images/tiles/Tile (5).png"), (32, 32)
            )
            if sub_group:
                sub_group.add(self)
        else:

            self.image = pygame.Surface((32, 32))
            self.image.fill((255, 0, 255))

        # Add every tile to the main group
        main_group.add(self)


        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)


        self.mask = pygame.mask.from_surface(self.image)














import random
import pygame

from typing import cast

class Zombie(pygame.sprite.Sprite):
    """An enemy class that moves across the screen"""

    def __init__(self, platform_group, portal_group, min_speed, max_speed, window_width, window_height, fps):
        """Initialize the zombie"""
        super().__init__() # Call super init

        # Set constant variables
        self.VERTICAL_ACCELERATION = 3
        self.RISE_TIME = 2
        self.WINDOW_WIDTH = window_width
        self.WINDOW_HEIGHT = window_height
        self.FPS = fps

        # Animation frames
        self.walk_right_sprites = []
        self.walk_left_sprites = []
        self.die_right_sprites = []
        self.die_left_sprites = []
        self.rise_right_sprites = []
        self.rise_left_sprites = []

        gender = random.randint(0, 1)

        if gender == 0:
            # Walking
            for i in range(1, 11):
                self.walk_right_sprites.append(
                    pygame.transform.scale(
                        pygame.image.load(f"assets/images/zombie/boy/walk/Walk ({i}).png"), (64, 64)))
            for sprite in self.walk_right_sprites:
                self.walk_left_sprites.append(pygame.transform.flip(sprite, True, False))

            # Dying
            for i in range(1, 11):
                self.die_right_sprites.append(
                    pygame.transform.scale(
                        pygame.image.load(f"assets/images/zombie/boy/dead/Dead ({i}).png"), (64, 64)))
            for sprite in self.die_right_sprites:
                self.die_left_sprites.append(pygame.transform.flip(sprite, True, False))

            # Rising (Dead 10 to Dead 1)
            for i in range(10, 0, -1):
                self.rise_right_sprites.append(
                    pygame.transform.scale(
                        pygame.image.load(f"assets/images/zombie/boy/dead/Dead ({i}).png"), (64, 64)))
            for sprite in self.rise_right_sprites:
                self.rise_left_sprites.append(pygame.transform.flip(sprite, True, False))
        else:
            # Walking
            for i in range(1, 11):
                self.walk_right_sprites.append(
                    pygame.transform.scale(
                        pygame.image.load(f"assets/images/zombie/girl/walk/Walk ({i}).png"), (64, 64)))
            for sprite in self.walk_right_sprites:
                self.walk_left_sprites.append(pygame.transform.flip(sprite, True, False))

            # Dying
            for i in range(1, 11):
                self.die_right_sprites.append(
                    pygame.transform.scale(
                        pygame.image.load(f"assets/images/zombie/girl/dead/Dead ({i}).png"), (64, 64)))
            for sprite in self.die_right_sprites:
                self.die_left_sprites.append(pygame.transform.flip(sprite, True, False))

            # Rising (Dead 10 to Dead 1)
            for i in range(10, 0, -1):
                self.rise_right_sprites.append(
                    pygame.transform.scale(
                        pygame.image.load(f"assets/images/zombie/girl/dead/Dead ({i}).png"), (64, 64)))
            for sprite in self.rise_right_sprites:
                self.rise_left_sprites.append(pygame.transform.flip(sprite, True, False))

        # Load an image and get rect
        self.direction = random.choice([-1, 1])
        self.current_sprite = 0
        if self.direction == -1:
            self.image = self.walk_left_sprites[self.current_sprite]
        else:
            self.image = self.walk_right_sprites[self.current_sprite]

        self.rect = self.image.get_rect()
        self.rect.bottomleft = (random.randint(100, self.WINDOW_WIDTH - 100), -100)

        # Attach sprite groups
        self.platform_group = platform_group
        self.portal_group = portal_group

        # Animation booleans
        self.animate_death = False
        self.animate_rise = False

        # Load sounds



